def renameConfig = [
        templateName             : "template",
        templateAppId            : "template.app.id",
        templateMaterialThemeName: "TemplateTheme",
        newPackage               : "domain.yourname.app",
        newProjectName           : "Your Project",
        newMaterialThemeName     : "MyMaterialTheme",
]

task deleteSetupCode() {
    def workflowsFolder = "${rootDir}/.github/workflows"
    def buildscriptsFolder = "${rootDir}/buildscripts"
    def templateChangeWorkflowFile = "$workflowsFolder/template_change_test.yml"
    def setupGradle = "$buildscriptsFolder/setup.gradle"

    doLast {
        removeTextFromFile("${rootDir}/build.gradle.kts", "setup.gradle")
        delete(templateChangeWorkflowFile)
        delete(setupGradle)
    }
}

task renameAppPackage(type: Copy) {
    description "Renames the template package in the app module."
    group null

    def newPackageAsDirectory = renameConfig.newPackage.replaceAll("\\.", "/")
    def startingDirectory = "/app/src/main/java/${renameConfig.templateName}"
    def endingDirectory = "/app/src/main/java/${newPackageAsDirectory}"

    into(projectDir)

    from(startingDirectory) {
        into(endingDirectory)
    }

    // into(projectDir) // copy into relative to this
    //
    //    from("foo"){
    //        into("copied/foo") // will be projectDir/copied/foo
    //        // just standard copy stuff
    //        rename("a.txt", "x.txt")
    //    }
    //
    //    from("bar"){
    //        into("copied/aswell/bar") //  projectDir/copied/copied/aswell/bar
    //    }
    //
    //    from("baz") // baz folder content will get copied into projectDir
    //
    //    //from("/bar"){ // this will mess things up, be very careful with the paths
    //    //    into("copied/aswell/bar")
    //    //}

    from(startingDirectory)
    into(endingDirectory)

    // Replace package statements
    filter { line ->
        line.replaceAll(
                "package ${renameConfig.templateName}",
                "package ${renameConfig.newPackage}"
        )
    }

    // Replace import statements
    filter { line ->
        line.replaceAll(
                "import ${renameConfig.templateName}",
                "import ${renameConfig.newPackage}"
        )
    }

    // Replace Theme references. We can just replace on name,
    // which covers both imports and function calls.
    filter { line ->
        line.replaceAll(
                "${renameConfig.templateMaterialThemeName}",
                "${renameConfig.newMaterialThemeName}"
        )
    }

    doLast {
        delete(startingDirectory)
    }
}

task replaceTemplateReferences {
    description "Replaces references to template in various files."
    group null

    doLast {
        replaceTextInFile(
                "${rootDir}/app/src/main/AndroidManifest.xml",
                "${renameConfig.templateName}.MainActivity",
                "${renameConfig.newPackage}.MainActivity",
        )

        replaceTextInFile(
                "${rootDir}/app/build.gradle.kts",
                "namespace = \"${renameConfig.templateName}\"",
                "namespace = \"${renameConfig.newPackage}\"",
        )

        replaceTextInFile(
                "${rootDir}/app/build.gradle.kts",
                "applicationId = \"${renameConfig.templateAppId}\"",
                "applicationId = \"${renameConfig.newPackage}\"",
        )

        replaceTextInFile(
                "${rootDir}/settings.gradle.kts",
                "rootProject.name = \"${renameConfig.templateName}\"",
                "rootProject.name = \"${renameConfig.newProjectName}\"",
        )

        replaceTextInFile(
                "${rootDir}/app/src/main/res/values/strings.xml",
                "<string name=\"app_name\">${renameConfig.templateName}</string>",
                "<string name=\"app_name\">${renameConfig.newProjectName}</string>",
        )
    }
}

task keepOrRemoveDependencies {
    description "Keeps or removes certain dependencies defined in renameConfig."
    group null

    doLast {
        def filesWithDependencies = [
                "${rootDir}/build.gradle.kts",
                "${rootDir}/app/build.gradle.kts",
                "${rootDir}/gradle/libs.versions.toml",
        ]

        filesWithDependencies.each { fileName ->
            // We removed android deps like hilt, retrofit, moshi
            // but I want to keep this block because it may
            // apply to some default KMM libs like ktor, circuit, sqldelight
        }
    }
}

task renameTemplate {
    description "Runs all of the necessary template setup tasks based on the renameConfig."
    group "Template Setup"

    dependsOn(
            keepOrRemoveDependencies,
            renameAppPackage,
            replaceTemplateReferences,
            deleteSetupCode,
    )

    doLast {
        exec {
            // After all setup changes happen, run a `git add` so
            // folks can just immediately commit and push if they wish.
            commandLine "git", "add", "${rootDir}/."
        }
    }
}

/**
 * Replaces all instances of [text] in a given [fileName].
 */
static def replaceTextInFile(fileName, originalText, newText) {
    def file = new File(fileName)

    file.text = file.text.replaceAll(originalText, newText)
}

/**
 * Removes all lines from the given fileName that contain some supplied text.
 */
static def removeTextFromFile(fileName, text) {
    def file = new File(fileName)
    List fileLines = file.readLines()
    file.text = ""
    fileLines.each { line ->
        if (!line.contains(text)) {
            file.append(line)
            file.append("\n")
        }
    }
}
